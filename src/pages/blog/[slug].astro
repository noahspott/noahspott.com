---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import "../../styles/blogPostStyles.css";

// Generate a page for each blog post
export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<Layout title={post.data.title} description={post.data.description}>
  <div class="bg-white dark:bg-gray-900">
    <article class="mx-auto max-w-prose px-4 py-8 md:py-12">
      <header class="mb-8 text-center md:mb-12">
        <h1
          class="mb-4 text-4xl font-bold tracking-tight text-gray-900 md:text-5xl dark:text-white"
        >
          {post.data.title}
        </h1>
        <div
          class="mb-6 flex items-center justify-center space-x-4 text-gray-600 dark:text-gray-400"
        >
          <time
            datetime={post.data.date.toISOString()}
            class="flex items-center"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="mr-2 h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            {post.data.date.toLocaleDateString()}
          </time>
          <span class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="mr-2 h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
              ></path>
            </svg>
            {post.data.author}
          </span>
        </div>
        {
          post.data.tags && (
            <div class="flex flex-wrap justify-center gap-2">
              {post.data.tags.map((tag) => (
                <span class="rounded-full bg-gray-200 px-3 py-1 text-sm text-gray-700 transition-colors hover:bg-gray-300 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700">
                  #{tag}
                </span>
              ))}
            </div>
          )
        }
      </header>

      <div
        class="prose prose-lg dark:prose-invert prose-pre:bg-gray-100 prose-pre:text-gray-900 dark:prose-pre:bg-gray-800 dark:prose-pre:text-gray-100 max-w-none"
      >
        <Content />
      </div>
    </article>
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const codeBlocks = document.querySelectorAll("pre");

    codeBlocks.forEach((block) => {
      const copyButton = document.createElement("button");
      copyButton.className = "copy-button";
      copyButton.innerHTML = "Copy";

      block.style.position = "relative";
      block.appendChild(copyButton);

      copyButton.addEventListener("click", async () => {
        const code = block.querySelector("code")?.textContent || "";
        await navigator.clipboard.writeText(code);

        copyButton.innerHTML = "Copied!";
        setTimeout(() => {
          copyButton.innerHTML = "Copy";
        }, 2000);
      });
    });
  });
</script>

<style>
  /* Only keeping styles that can't be handled by Tailwind */
  .prose :global(pre) {
    position: relative;
  }

  .copy-button {
    position: absolute;
    bottom: 0.5rem;
    right: 0.5rem;
    padding: 1rem;
    margin: 1rem;
    background: #2563eb;
    color: #ffffff;
    border: 1px solid #3b82f6;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    opacity: 1;
    transition: all 0.2s;
  }

  :global(.dark) .copy-button {
    background: #2563eb;
    color: #ffffff;
    border: 1px solid #3b82f6;
  }

  .copy-button:hover {
    background: #1d4ed8; /* Blue-700 on hover */
    border-color: #2563eb;
    transform: scale(1.05);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Optional: Add custom prose styles if needed */
  .prose :global(h1) {
    @apply mb-4 text-3xl font-bold text-gray-900 dark:text-white;
  }

  .prose :global(h2) {
    @apply mb-4 mt-8 text-2xl font-bold text-gray-800 dark:text-gray-100;
  }

  .prose :global(p) {
    @apply mb-4 text-gray-700 dark:text-gray-300;
  }

  .prose :global(ul) {
    @apply mb-4 list-inside list-disc text-gray-700 dark:text-gray-300;
  }

  .prose :global(pre) {
    @apply relative my-4 overflow-x-auto rounded-lg bg-gray-200 p-4 pb-8 text-gray-900 dark:bg-gray-800 dark:text-gray-100;
  }

  .prose :global(code) {
    @apply font-mono text-sm text-gray-900;
  }

  .prose :global(a) {
    @apply text-blue-400 hover:text-blue-300;
  }

  .prose :global(strong) {
    @apply text-gray-100;
  }

  .prose :global(blockquote) {
    @apply border-l-4 border-gray-700 pl-4 text-gray-400;
  }

  /* Add a subtle gradient background to code blocks */
  .prose :global(pre) {
    @apply bg-gradient-to-br from-gray-100 to-white pb-8 dark:from-gray-900 dark:to-gray-800;
  }

  /* Ensure inline code has good contrast too */
  .prose :global(pre code) {
    @apply relative text-gray-900 dark:text-gray-100;
  }
</style>
